[
  {
    "id": 1,
    "content": "大家好!!!!!",
    "views": 5,
    "board_id": 3,
    "title": "新人报道",
    "ct": 1535709536,
    "user_id": 1,
    "ut": 1535709536
  },
  {
    "id": 2,
    "content": "收简历了!!!\r\n邮箱: **2785188932@qq.com**\r\n",
    "views": 7,
    "board_id": 4,
    "title": "招聘Python后端",
    "ct": 1535709812,
    "user_id": 2,
    "ut": 1535709812
  },
  {
    "id": 3,
    "content": "骚话连篇~",
    "views": 2,
    "board_id": 3,
    "title": "水水更健康",
    "ct": 1535717678,
    "user_id": 5,
    "ut": 1535717678
  },
  {
    "id": 4,
    "content": "Ngnix反向代理Koa 站点，经常出现响应很慢的问题，是连接数的问题吗？",
    "views": 3,
    "board_id": 2,
    "title": "Nginx",
    "ct": 1535717855,
    "user_id": 1,
    "ut": 1535717855
  },
  {
    "id": 5,
    "content": "公司决定node不做中间层了  直接让前端处理调服务接口 正让我们看看喜欢往哪边转呢 1，java  2，前端react  怎么玩？  之前就做前端的angularjs，喜欢后端 node出来就开始学了  现在又回去了 ",
    "views": 1,
    "board_id": 3,
    "title": "完蛋要失业了额",
    "ct": 1535717950,
    "user_id": 1,
    "ut": 1535717950
  },
  {
    "id": 6,
    "content": "这条道路很陡，学习成本很显然，只是基于兴趣，同时也希望在薪资上也能有好的收获（并不是说前端不如人工智能薪资高，不要误解我的意思）。\r\n\r\n前端本身就有很多要学的技术，现在大前端技术也在学习提升阶段。那是不是就不该把经历放到学习人工智能上（只是人工智能的某个领域而已）。\r\n\r\n希望大家给点自我看法。",
    "views": 2,
    "board_id": 2,
    "title": "前端转python，以此为突破口往人工智能方向发展",
    "ct": 1535718115,
    "user_id": 4,
    "ut": 1535718115
  },
  {
    "id": 7,
    "content": "最近做了一款聊天室的app，用socket io来做长连接，一般是监听事件，然后进行相应的处理，但是如果现在想往客户端主动推送一些消息的话，应该怎么来处理呢？？？有没有相关的参考或者例子或者思路都可以，谢谢！！！",
    "views": 1,
    "board_id": 2,
    "title": "socket io 推送消息的问题",
    "ct": 1535718220,
    "user_id": 4,
    "ut": 1535718220
  },
  {
    "id": 8,
    "content": "我公司做的是聊天室，之前都是用轮询，不过多人同时发信息时还是会有问题试了很多方法，还是会有小概率丢失数据或者出现两条同样的数据。\r\n现在想转websocket，想问问一两千个人对服务器压力有多大？有什么工具能做这样面的测试？\r\n求分享。",
    "views": 1,
    "board_id": 2,
    "title": "有用 websocket 做过聊天室的朋友么？",
    "ct": 1535718353,
    "user_id": 6,
    "ut": 1535718353
  },
  {
    "id": 9,
    "content": "用nodejs写了个云服务破解excel密码，doc密码，pdf密码等工具，欢迎撸友们帮忙测试。",
    "views": 1,
    "board_id": 2,
    "title": "抱歉，会js真的了不起，一个云服务两天就写完了",
    "ct": 1535718501,
    "user_id": 2,
    "ut": 1535718501
  },
  {
    "id": 10,
    "content": "网页音乐播放器，（同域名）当前页面进行音乐播放，跳转另外一个链接（当前页面打开），怎样让音乐不停止并继续播放？",
    "views": 2,
    "board_id": 2,
    "title": "怎样让音乐不停止并继续播放？",
    "ct": 1535718590,
    "user_id": 5,
    "ut": 1535718590
  },
  {
    "id": 11,
    "content": "首先思考下手上的工作是否做得足够好了，近几年前端技术发展迅猛各种框架层出不穷，刚学会jquery还没用熟， angular 、vue 、react 已经满大街了。\r\ngulp 还没明白怎么回事、webpack 已开始遍地开花了。眼花缭乱的技术不知道从哪里开始好。\r\n如果你还被这些困扰的话，那请静下来思考一下，技术的发展总是有规律的，学习也是有规律可循的，我的建议是，把共性和必要的技能先稳固下来，既不浪费时间，又能提高效率，如果这块还么稳固好、框架什么少看几种吧，先有一样可用的就好。\r\n对于加强基础一个可行的方案是，从自己上手的工作开始、除了专注现学现用工作需要的框架技术外加强基础的学习",
    "views": 1,
    "board_id": 2,
    "title": "前端如何进阶全栈开发",
    "ct": 1535718735,
    "user_id": 1,
    "ut": 1535718735
  },
  {
    "id": 12,
    "content": "1. 围观群众\r\n2. 闲的无聊",
    "views": 1,
    "board_id": 3,
    "title": "mark",
    "ct": 1535877648,
    "user_id": 1,
    "ut": 1535877648
  },
  {
    "id": 13,
    "content": "编码，是每个程序员绕不开的话题。对于前端工程师而言，字符更是会直观地展示在界面上。\r\n提起文字，大部分人的脑中，都会定式为规整排列的字符。但是林子大了什么鸟都有，世界上可是存在着6800+种文字，难免会飞出来一些诡异的鸟…\r\n而号称“万国码”的Unicode，在实现编码与展示的时候，也会不会遇到一些奇葩的事情呢？",
    "views": 3,
    "board_id": 3,
    "title": "编码",
    "ct": 1535884389,
    "user_id": 1,
    "ut": 1535884389
  },
  {
    "id": 14,
    "content": "**编码**是每个程序员绕不开的话题。对于前端工程师而言，字符更是会直观地展示在界面上。\r\n提起文字，大部分人的脑中，都会定式为规整排列的字符。但是林子大了什么鸟都有，世界上可是存在着6800+种文字，难免会飞出来一些诡异的鸟…\r\n号称“万国码”的Unicode，在实现编码与展示的时候，也会不会遇到一些奇葩的事情呢？",
    "views": 1,
    "board_id": 2,
    "title": "编码",
    "ct": 1535884618,
    "user_id": 1,
    "ut": 1535884618
  },
  {
    "id": 15,
    "content": "对于一张网页，我们往往希望它是结构良好，内容清晰的，这样搜索引擎才能准确地认知它。\r\n而反过来，又有一些情景，我们不希望内容能被轻易获取，比方说电商网站的交易额，教育网站的题目等。因为这些内容，往往是一个产品的生命线，必须做到有效地保护。这就是爬虫与反爬虫这一话题的由来。\r\n\r\n2. 常见反爬虫策略\r\n但是世界上没有一个网站，能做到完美地反爬虫。\r\n\r\n如果页面希望能在用户面前正常展示，同时又不给爬虫机会，就必须要做到识别真人与机器人。因此工程师们做了各种尝试，这些策略大多采用于后端，也是目前比较常规单有效的手段，比如：\r\n\r\nUser-Agent + Referer检测\r\n账号及Cookie验证\r\n验证码\r\nIP限制频次\r\n而爬虫是可以无限逼近于真人的，比如：\r\n\r\nchrome headless或phantomjs来模拟浏览器环境\r\ntesseract识别验证码\r\n代理IP淘宝就能买到\r\n所以我们说，100%的反爬虫策略？不存在的。\r\n更多的是体力活，是个难易程度的问题。\r\n\r\n不过作为前端工程师，我们可以增加一下游戏难度，设计出一些很(sang)有(xin)意(bing)思(kuang)的反爬虫策略。",
    "views": 2,
    "board_id": 2,
    "title": "爬虫",
    "ct": 1535884707,
    "user_id": 1,
    "ut": 1535884707
  },
  {
    "id": 16,
    "content": "",
    "views": 1,
    "board_id": 1,
    "title": "向mongodb里插入10万条记录的代码怎么写？",
    "ct": 1536457615,
    "user_id": 1,
    "ut": 1536457615
  },
  {
    "id": 17,
    "content": "“【不扯淡】年轻时死磕，年长点让小弟死磕，现在抓个专家一起吃饭，没有什么是一顿饭解决不了的，不行就二顿\r\n工程师的能力不是编码和死磕，而是解决问题\r\n\r\n很多人点赞，就说的再明白点\r\n\r\n年轻死磕是为了长本事，30岁以前都可以这样做\r\n带团队后，要懂得任务下放，让更多人帮你，别带人越多越累\r\n30岁之后是打牌阶段，技能积累足够用，这时要注重社交，打组合拳才能玩的更好\r\n少抱怨，多思考，未来更美好\r\n\r\n强调30岁不是我创造的，大部分人都会认为30岁后事情，压力会明显大得多，比如家庭，孩子，房子，车子，票子，甚至是管理，权利，欲望等等吧。我感受最深的是身体不如从前和记忆力明显下降。”\r\n\r\n这其实是我这1年一个非常大的变化。想明白了很多事，心态上好了很多。另外，作为网红的好处的是你能够接触到更多信息和更好的朋友圈子。这其实是以前没法做到的。我本身也是偏于内向的人，只是不得已做公众号，演讲，布道，应酬，收获当然也是相当丰富的。以前看事情是点，现在看的是趋势，能够做到心中有数，自然胸有成竹的感觉",
    "views": 1,
    "board_id": 1,
    "title": "我的2017年总结",
    "ct": 1536457755,
    "user_id": 4,
    "ut": 1536457755
  },
  {
    "id": 18,
    "content": "先引用一段乔任梁事件的一段评论，然后再讨论Node.js之父Ryan Dahl被过度解读的问题。\r\n\r\n自从有了网络，人们可以随便起个名字在网络上发出自己的声音，一部分人便开始亢奋了！言论自由固然好，可一旦太过自由，也就开始可怕了！除了那些正常的声音之外，还出现了攻击、谩骂、泄愤、嘲笑、拉帮结派、或是有目的的制造舆论！\r\n\r\n之前人们评说王宝强离婚事件，口诛笔伐，把他们夫妻二人的各种历史挖到骨头说到烂。如今乔任梁走了，又成了娱乐大事件，网上盛传有关他去世的丑闻。一个鲜活的生命黯然离世，依然有人能毫不留情的对逝者肆意抹黑。\r\n\r\n我不是乔任梁的粉丝，也不想讨论他到底因何离去，我只想说，逝者应该得到应有的尊重，这是中国人自古遵循的道理。无论有关他的新闻是否属实，都已经没有讨论的必要了，为什么不能让人安静的离开，难道真的没有一点同情心吗？这简直是赤裸裸的网络暴力！\r\n\r\nNode.js之父Ryan Dahl在2012年就离开社区的，我们必须要承认他作为创始人的伟大创举，但不能标签化，ryan不代表node，从他离开社区后，对于社区而言，他就“死”在曾经的丰功伟绩上，未来与他无关！但是总有些人想拿这事儿做文章过度解读，\r\n\r\n我只想说，真TMD不要脸，这种死人的光也是沾，而且沾得那么脸不红气不喘！\r\n\r\nNode.js之父在2012年就离开社区的，然而这5年发展的依然很好，并无影响。这篇文章本来没什么问题，但有些人借位营销就恶心了。以下精选了cnodejs.org上关于此事的大家的精彩评论。",
    "views": 1,
    "board_id": 1,
    "title": "请别拿“死”人做文章",
    "ct": 1536457909,
    "user_id": 4,
    "ut": 1536457909
  },
  {
    "id": 19,
    "content": "MongoDB 基本上可以算是 Node.js 的缺省数据库。好多主流框架都用它，比如 Mean.io (Mean.js), Meteor, Keystone 等等。（如果要了解其他的存储方式，可以看这里 http://jsnoder.com/blog/chang-yong-shu-ju-ku-xuan-yong/.）\r\n怎样安装就不介绍了，网上文档很多。这里主要介绍如何使用的基本知识\r\n\r\n为什么要 NoSQL\r\n\r\n相比较 SQL 的关系数据库，NoSQL 对数据模型的限制更少，设计简单，横向扩展（horizontal scale）更容易，对已有数据控制更好。这些特点正好符合了现在的 web app 开发特点，快速开发，中途不停修改迭代，一旦用户访问上量再增加硬件横向扩展。MongoDB 满足这些要求而同时又在数据存取的准确性，速度和可靠性几方面平衡做得比较好。估计这是 MongoDB 流行的原因之一吧。相比较 SQL 的关\r\n\r\n另外就是 NoSQL 数据库相比 SQL 数据库一般管理要简单很多，不需要太多 DBA 的帮助就能使用。不过简单的代价就是功能会少些。",
    "views": 1,
    "board_id": 1,
    "title": "MongoDB 基本使用入门",
    "ct": 1536458097,
    "user_id": 4,
    "ut": 1536458097
  },
  {
    "id": 20,
    "content": "最近招聘贴确实增多了, 注意到有的帖子挺难懂, 发个帖子提醒下…\r\n论坛是希望 Node.js 找工作更轻松的, 所以特别关心一下格式啦\r\n发贴不要漏掉必要的信息, 比如:\r\n\r\n1. 工作地点, 公司名字, 最好在标题上\r\n2. 工作环境, 有照片更好\r\n3. 公司技术跟产品, 或者比如 GitHub 帐号和公司首页\r\n4.  技能的要求, 工作内容\r\n5. 工作待遇\r\n6. 联系方式",
    "views": 1,
    "board_id": 1,
    "title": "【公告】发招聘帖的同学留意一下这里",
    "ct": 1536458321,
    "user_id": 1,
    "ut": 1536458321
  }
]